Answer summary: https://docs.google.com/spreadsheets/d/1GybZtOaVOkVoMeQpOotPHUJBusz0qHfZospyqzZI_lE/edit?usp=sharing


Question 1:

This algorithm will always take the same amount of time to run, regardless of the size of the integer, n. Therefore, the Big-O of the algorithm is O(1), or constant time.

Question 2:

The time it takes for this algorithm to run will increase as the length of the collection increases. Therefore, the Big-O of the algorithm is O(n), or linear time.

Question 3:

The time complexity will be O (n * m), or O(n^2) where n is the number of collections and m is the max size of each subcollection. Therefore, the Big-O of this algorithm is quadratic time, O(n^2).

Question 4:

The Big-O of the following algorithm is exponential time. See repl. https://repl.it/repls/UnimportantAstonishingOpensource

Question 5:
The Big-O of the following algorithm is exponential time. See repl. https://repl.it/repls/NaturalHiddenCareware

Question 6:
This algorithm is an implementation of quicksort. Quicksort's Big-O time complexity is n^2, so the Big-O of this algorithm must be n^2, or quadratic time.
